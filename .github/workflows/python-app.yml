# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13, macos-12] #macos-12 because macos-latest is arm64 only and we also need to support intell CPUs
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'
        check-latest: true
    - name: Install GCC for linux
      uses: egor-tensin/setup-gcc@v1.3
      if: matrix.os == 'ubuntu-latest'
    - name: Install hunspell requirements for linux
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y autoconf libtool gettext autopoint
    - name: Install requirements for macOS
      if: matrix.os == 'macos-latest' || matrix.os == 'macos-13' || matrix.os == 'macos-12'
      run: brew install automake autoconf libtool
    - name: Symlink tcl 8.6 for macos-13
      if: matrix.os == 'macos-13'
      run: |
        ln -s /Users/runner/hostedtoolcache/PyPy/3.7.13/x64/lib/libtcl8.6.dylib /usr/local/lib/libtcl8.6.dylib
        ln -s /Users/runner/hostedtoolcache/PyPy/3.7.13/x64/lib/libtk8.6.dylib /usr/local/lib/libtk8.6.dylib
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest --github_token=${{ secrets.GITHUB_TOKEN }} --github_user=MartinHlavna
